{"version":3,"sources":["utils/mutations.js","utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["ADD_USER","gql","LOGIN","ADD_BOOK","REMOVE_BOOK","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","addBook","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","link","console","error","handleSaveBook","bookToSave","find","log","Auth","loggedIn","variables","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QUERY_ME","SavedBooks","useQuery","loading","deleteBook","userData","me","handleDeleteBook","savedBooks","_id","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6XAEaA,EAAWC,YAAG,iRAadC,EAAQD,YAAG,oOAaXE,EAAWF,YAAG,2YAgCdG,GAlBYH,YAAG,iSAkBDA,YAAG,2N,wBCZf,MA5CE,4CAyCd,OAzCc,uCAEf,WACE,OAAOI,YAAOC,KAAKC,WACrB,GAEA,sBACA,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,EACzC,GAEA,4BACA,SAAeA,GACb,IAEE,OADgBH,YAAOG,GACXE,IAAMC,KAAKC,MAAQ,GAKjC,CAFE,MAAOC,GACP,OAAO,CACT,CACF,GAAC,sBAED,WAEE,OAAOC,aAAaC,QAAQ,WAC9B,GAAC,mBAED,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GACjCE,OAAOC,SAASC,OAAO,IACzB,GAAC,oBAED,WAEEN,aAAaO,WAAW,YAExBH,OAAOC,SAASC,OAAO,IACzB,KAAC,EAzCc,ICYFE,EAAe,SAACC,GAC3B,IAAMC,EAAeV,aAAaC,QAAQ,cACtCU,KAAKC,MAAMZ,aAAaC,QAAQ,eAChC,KAEJ,IAAKS,EACH,OAAO,EAGT,IAAMG,EAAkC,OAAZH,QAAY,IAAZA,OAAY,EAAZA,EAAcI,QAAO,SAACC,GAAW,OAAKA,IAAgBN,CAAM,IAGxF,OAFAT,aAAaG,QAAQ,aAAcQ,KAAKK,UAAUH,KAE3C,CACT,E,OC0HaI,EA7IK,WAElB,MAA0CC,mBAAS,IAAG,mBAA/CC,EAAa,KAAEC,EAAgB,KAEtC,EAAsCF,mBAAS,IAAG,mBAA3CG,EAAW,KAAEC,EAAc,KAGlC,EAAwCJ,mBDhBjBlB,aAAaC,QAAQ,cACtCU,KAAKC,MAAMZ,aAAaC,QAAQ,eAChC,ICc6D,mBAA5DS,EAAY,KAAEa,EAAe,KAGpC,EAAkBC,YAAYnC,GAAvBoC,EAAgC,iBAAzB,GAIdC,qBAAU,WACR,OAAO,WDjBkB,IAACC,KCiBDjB,GDhBXkB,OACZ5B,aAAaG,QAAQ,aAAcQ,KAAKK,UAAUW,IAElD3B,aAAaO,WAAW,aCaa,CACzC,IAGA,IAAMsB,EAAgB,iDAAG,WAAOC,GAAK,uFACZ,GAAvBA,EAAMC,iBAEDV,EAAY,CAAD,yCACP,GAAK,gCC9BTW,MAAM,iDAAD,ODkCiCX,IAAa,KAAD,EAAvC,IAARY,EAAQ,QAEAC,GAAG,CAAD,qBACR,IAAIC,MAAM,yBAAyB,KAAD,mBAGlBF,EAASG,OAAO,KAAD,YAA/BC,EAAK,EAALA,MAEFC,EAAWD,EAAME,KAAI,SAACC,GAAI,YAAM,CACpC/B,OAAQ+B,EAAKC,IAAM,QACnBC,QAASF,EAAKG,WAAWD,SAAW,CAAC,wBACrCE,MAAOJ,EAAKG,WAAWC,OAAS,WAChCC,YAAaL,EAAKG,WAAWE,aAAe,iBAC5CC,OAAiC,QAA1B,EAAAN,EAAKG,WAAWI,kBAAU,aAA1B,EAA4BC,YAAa,GAChDC,KAAM,GACP,IAED7B,EAAiBkB,GACjBhB,EAAe,IAAI,kDAEnB4B,QAAQC,MAAM,EAAD,IAAM,0DAEtB,gBA9BqB,sCAiChBC,EAAc,iDAAG,WAAO3C,GAAM,mFAMqB,GAJjD4C,EAAalC,EAAcmC,MAAK,SAACd,GAAI,OAAKA,EAAK/B,SAAWA,CAAM,IACtEyC,QAAQK,IAAIF,GAGEG,EAAKC,WAAaD,EAAK/D,WAAa,KAEvC,CAAD,yCACD,GAAK,gCAIOgC,EAAQ,CACzBiC,UAAU,eAAML,KACf,KAAD,EAFIM,EAAI,OAGVT,QAAQK,IAAII,GAGZpC,EAAgB,GAAD,mBAAKb,GAAY,CAAE2C,EAAW5C,UAAS,kDAEtDyC,QAAQC,MAAM,EAAD,IAAM,0DAEtB,gBAvBmB,sCAyBpB,OACE,qCACE,cAACS,EAAA,EAAS,CAACC,OAAK,EAACC,UAAU,qBAAoB,SAC7C,eAACC,EAAA,EAAS,WACR,mDACA,cAACC,EAAA,EAAI,CAACC,SAAUpC,EAAiB,SAC/B,eAACmC,EAAA,EAAKE,IAAG,WACP,cAACC,EAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,EAAE,SACjB,cAACL,EAAA,EAAKM,QAAO,CACXC,KAAK,cACLC,MAAOnD,EACPoD,SAAU,SAACC,GAAC,OAAKpD,EAAeoD,EAAEC,OAAOH,MAAM,EAC/CI,KAAK,OACLC,KAAK,KACLC,YAAY,wBAGhB,cAACX,EAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,EAAE,SACjB,cAACU,EAAA,EAAM,CAACH,KAAK,SAASI,QAAQ,UAAUH,KAAK,KAAI,uCAS3D,eAACd,EAAA,EAAS,WACR,6BACG5C,EAAcS,OAAM,kBACNT,EAAcS,OAAM,aAC/B,+BAEN,cAACqD,EAAA,EAAW,UACT9D,EAAcoB,KAAI,SAACC,GAClB,OACE,eAAC0C,EAAA,EAAI,CAAmBC,OAAO,OAAM,UAClC3C,EAAKM,MACJ,cAACoC,EAAA,EAAKE,IAAG,CAACC,IAAK7C,EAAKM,MAAOwC,IAAG,wBAAmB9C,EAAKI,OAASoC,QAAQ,QACrE,KACJ,eAACE,EAAA,EAAKK,KAAI,WACR,cAACL,EAAA,EAAKM,MAAK,UAAEhD,EAAKI,QAClB,oBAAGkB,UAAU,QAAO,sBAAWtB,EAAKE,WACpC,cAACwC,EAAA,EAAKO,KAAI,UAAEjD,EAAKK,cAChBW,EAAKC,YACJ,cAACsB,EAAA,EAAM,CACLW,SAAsB,OAAZhF,QAAY,IAAZA,OAAY,EAAZA,EAAciF,MAAK,SAAC5E,GAAW,OAAKA,IAAgByB,EAAK/B,MAAM,IACzEqD,UAAU,qBACV8B,QAAS,kBAAMxC,EAAeZ,EAAK/B,OAAO,EAAC,SAC9B,OAAZC,QAAY,IAAZA,KAAciF,MAAK,SAAC5E,GAAW,OAAKA,IAAgByB,EAAK/B,MAAM,IAC5D,oCACA,yBAfD+B,EAAK/B,OAqBpB,WAKV,E,SEnJaoF,EAAW1G,YAAG,sNC0EZ2G,EAlEI,WACjB,MAA0BC,YAASF,GAA3BG,EAAO,EAAPA,QAASrC,EAAI,EAAJA,KACjB,EAAqBnC,YAAYlC,GAA1B2G,EAAsC,iBAA5B,GAEXC,GAAe,OAAJvC,QAAI,IAAJA,OAAI,EAAJA,EAAMwC,KAAM,CAAC,EAGxBC,EAAgB,iDAAG,WAAO3F,GAAM,mFACmB,GAAzC+C,EAAKC,WAAaD,EAAK/D,WAAa,KAEvC,CAAD,yCACD,GAAK,gCAIWwG,EAAW,CAChCvC,UAAW,CAAEjD,YACZ,KAAD,WAFMkD,EAAI,EAAJA,KAGRT,QAAQK,IAAII,GAEZnD,EAAaC,GAAQ,kDAErByC,QAAQC,MAAM,EAAD,IAAM,0DAEtB,gBAjBqB,sCAoBtB,OAAI6C,EACK,4CAIP,qCACE,cAACpC,EAAA,EAAS,CAACC,OAAK,EAACC,UAAU,qBAAoB,SAC7C,cAACC,EAAA,EAAS,UACR,0DAGJ,eAACA,EAAA,EAAS,WACR,6BACGmC,EAASG,WAAWzE,OAAM,kBACZsE,EAASG,WAAWzE,OAAM,kBAAyC,IAA/BsE,EAASG,WAAWzE,OAAe,OAAS,QAAO,KAClG,6BAEN,cAACqD,EAAA,EAAW,UACTiB,EAASG,WAAW9D,KAAI,SAACC,GACxB,OACE,eAAC0C,EAAA,EAAI,CAAgBC,OAAO,OAAM,UAC/B3C,EAAKM,MAAQ,cAACoC,EAAA,EAAKE,IAAG,CAACC,IAAK7C,EAAKM,MAAOwC,IAAG,wBAAmB9C,EAAKI,OAASoC,QAAQ,QAAW,KAChG,eAACE,EAAA,EAAKK,KAAI,WACR,cAACL,EAAA,EAAKM,MAAK,UAAEhD,EAAKI,QAClB,oBAAGkB,UAAU,QAAO,sBAAWtB,EAAKE,WACpC,cAACwC,EAAA,EAAKO,KAAI,UAAEjD,EAAKK,cACjB,cAACkC,EAAA,EAAM,CAACjB,UAAU,uBAAuB8B,QAAS,kBAAMQ,EAAiB5D,EAAK/B,OAAO,EAAC,oCAN/E+B,EAAK8D,IAYpB,WAKV,E,sDCyDeC,GA3HI,WAGjB,MAAwCrF,mBAAS,CAAEsF,SAAU,GAAIC,MAAO,GAAIC,SAAU,KAAK,mBAApFC,EAAY,KAAEC,EAAe,KAGpC,EAAoB1F,oBAAS,GAAtB2F,EAA4B,iBAAnB,GAGhB,EAAkC3F,oBAAS,GAAM,mBAA1C4F,EAAS,KAAEC,EAAY,KAG9B,EAAkBvF,YAAYtC,GAAvB8H,EAAgC,iBAAzB,GAERC,EAAoB,SAACnF,GACzB,MAAwBA,EAAM6C,OAAtBJ,EAAI,EAAJA,KAAMC,EAAK,EAALA,MACdoC,EAAgB,2BAAKD,GAAY,kBAAGpC,EAAOC,IAC7C,EAEM3C,EAAgB,iDAAG,WAAOC,GAAK,mFAQlC,OAPDA,EAAMC,kBAIuB,IADhBD,EAAMoF,cACVC,kBACPrF,EAAMC,iBACND,EAAMsF,mBACP,kBAGwBJ,EAAQ,CAC7BtD,UAAU,eAAMiD,KACf,KAAD,WAFMhD,EAAI,EAAJA,KAIRH,EAAK6D,MAAM1D,EAAKqD,QAAQtH,OAAO,kDAG/BwD,QAAQC,MAAM,EAAD,IACb4D,GAAa,GAAM,QAGrBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KACT,0DACJ,gBA3BqB,sCA6BtB,OACE,mCAGE,eAAC1C,EAAA,EAAI,CAACsD,YAAU,EAACT,UAAWA,EAAW5C,SAAUpC,EAAiB,UAGhE,cAAC0F,GAAA,EAAK,CAACC,aAAW,EAACC,QAAS,kBAAMV,GAAa,EAAM,EAAEW,KAAMZ,EAAW9B,QAAQ,SAAQ,oDAKxF,eAAChB,EAAA,EAAK2D,MAAK,WAET,cAAC3D,EAAA,EAAK4D,MAAK,CAACC,QAAQ,WAAU,sBAE9B,cAAC7D,EAAA,EAAKM,QAAO,CACXM,KAAK,OACLE,YAAY,gBACZP,KAAK,WACLE,SAAUwC,EACVzC,MAAOmC,EAAaH,SACpBsB,UAAQ,IAGV,cAAC9D,EAAA,EAAKM,QAAQyD,SAAQ,CAACnD,KAAK,UAAS,sCAIvC,eAACZ,EAAA,EAAK2D,MAAK,WAET,cAAC3D,EAAA,EAAK4D,MAAK,CAACC,QAAQ,QAAO,mBAE3B,cAAC7D,EAAA,EAAKM,QAAO,CACXM,KAAK,QACLE,YAAY,qBACZP,KAAK,QACLE,SAAUwC,EACVzC,MAAOmC,EAAaF,MACpBqB,UAAQ,IAGV,cAAC9D,EAAA,EAAKM,QAAQyD,SAAQ,CAACnD,KAAK,UAAS,mCAIvC,eAACZ,EAAA,EAAK2D,MAAK,WAET,cAAC3D,EAAA,EAAK4D,MAAK,CAACC,QAAQ,WAAU,sBAE9B,cAAC7D,EAAA,EAAKM,QAAO,CACXM,KAAK,WACLE,YAAY,gBACZP,KAAK,WACLE,SAAUwC,EACVzC,MAAOmC,EAAaD,SACpBoB,UAAQ,IAGV,cAAC9D,EAAA,EAAKM,QAAQyD,SAAQ,CAACnD,KAAK,UAAS,sCAIvC,cAACG,EAAA,EAAM,CACLW,WAAYiB,EAAaH,UAAYG,EAAaF,OAASE,EAAaD,UACxE9B,KAAK,SACLI,QAAQ,UAAS,wBAO3B,ECrCegD,GAnFG,WAChB,MAAwC9G,mBAAS,CAAEuF,MAAO,GAAIC,SAAU,KAAK,mBAAtEC,EAAY,KAAEC,EAAe,KACpC,EAAoB1F,oBAAS,GAAtB2F,EAA4B,iBAAnB,GAChB,EAAkC3F,oBAAS,GAAM,mBAA1C4F,EAAS,KAAEC,EAAY,KAG9B,EAAgBvF,YAAYpC,GAArBiI,EAA2B,iBAAtB,GAENJ,EAAoB,SAACnF,GACzB,MAAwBA,EAAM6C,OAAtBJ,EAAI,EAAJA,KAAMC,EAAK,EAALA,MACdoC,EAAgB,2BAAKD,GAAY,kBAAGpC,EAAOC,IAC7C,EAEM3C,EAAgB,iDAAG,WAAOC,GAAK,mFAQlC,OAPDA,EAAMC,kBAIuB,IADhBD,EAAMoF,cACVC,kBACPrF,EAAMC,iBACND,EAAMsF,mBACP,kBAGwBC,EAAM,CAC3B3D,UAAU,eAAMiD,KACf,KAAD,WAFMhD,EAAI,EAAJA,KAIRH,EAAK6D,MAAM1D,EAAK0D,MAAM3H,OAAO,kDAE7BwD,QAAQC,MAAM,EAAD,IACb4D,GAAa,GAAM,QAGrBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KACT,0DACJ,gBA1BqB,sCA4BtB,OACE,mCACE,eAAC1C,EAAA,EAAI,CAACsD,YAAU,EAACT,UAAWA,EAAW5C,SAAUpC,EAAiB,UAChE,cAAC0F,GAAA,EAAK,CAACC,aAAW,EAACC,QAAS,kBAAMV,GAAa,EAAM,EAAEW,KAAMZ,EAAW9B,QAAQ,SAAQ,+DAGxF,eAAChB,EAAA,EAAK2D,MAAK,WACT,cAAC3D,EAAA,EAAK4D,MAAK,CAACC,QAAQ,QAAO,mBAC3B,cAAC7D,EAAA,EAAKM,QAAO,CACXM,KAAK,OACLE,YAAY,aACZP,KAAK,QACLE,SAAUwC,EACVzC,MAAOmC,EAAaF,MACpBqB,UAAQ,IAEV,cAAC9D,EAAA,EAAKM,QAAQyD,SAAQ,CAACnD,KAAK,UAAS,mCAGvC,eAACZ,EAAA,EAAK2D,MAAK,WACT,cAAC3D,EAAA,EAAK4D,MAAK,CAACC,QAAQ,WAAU,sBAC9B,cAAC7D,EAAA,EAAKM,QAAO,CACXM,KAAK,WACLE,YAAY,gBACZP,KAAK,WACLE,SAAUwC,EACVzC,MAAOmC,EAAaD,SACpBoB,UAAQ,IAEV,cAAC9D,EAAA,EAAKM,QAAQyD,SAAQ,CAACnD,KAAK,UAAS,sCAEvC,cAACG,EAAA,EAAM,CACLW,WAAYiB,EAAaF,OAASE,EAAaD,UAC/C9B,KAAK,SACLI,QAAQ,UAAS,wBAM3B,ECmBeiD,GArGG,WAEhB,MAAkC/G,oBAAS,GAAM,mBAA1CgH,EAAS,KAAEC,EAAY,KAE9B,OAEE,qCACE,cAACC,EAAA,EAAM,CAACC,GAAG,OAAOrD,QAAQ,OAAOsD,OAAO,KAAI,SAE1C,eAACvE,EAAA,EAAS,CAACF,OAAK,YAEd,cAACuE,EAAA,EAAOG,MAAK,CAACC,GAAIC,IAAMC,GAAG,IAAG,iCAI9B,cAACN,EAAA,EAAOO,OAAM,CAAC,gBAAc,WAE7B,cAACP,EAAA,EAAOQ,SAAQ,CAACnG,GAAG,SAAQ,SAE1B,eAACoG,EAAA,EAAG,CAAC/E,UAAU,UAAS,UAEtB,cAAC+E,EAAA,EAAIJ,KAAI,CAACD,GAAIC,IAAMC,GAAG,IAAG,8BAKzBlF,EAAKC,WAEJ,qCACE,cAACoF,EAAA,EAAIJ,KAAI,CAACD,GAAIC,IAAMC,GAAG,SAAQ,4BAI/B,cAACG,EAAA,EAAIJ,KAAI,CAAC7C,QAASpC,EAAKsF,OAAO,uBAGjC,cAACD,EAAA,EAAIJ,KAAI,CAAC7C,QAAS,kBAAMuC,GAAa,EAAK,EAAC,qCAatD,cAACY,EAAA,EAAK,CACJlE,KAAK,KACL6C,KAAMQ,EACNc,OAAQ,kBAAMb,GAAa,EAAM,EACjC,kBAAgB,eAAc,SAG9B,eAACc,EAAA,EAAIlF,UAAS,CAACmF,iBAAiB,QAAO,UAErC,cAACH,EAAA,EAAMI,OAAM,CAACC,aAAW,WAEvB,cAACL,EAAA,EAAMvD,MAAK,CAAC/C,GAAG,eAAc,SAE5B,eAACoG,EAAA,EAAG,CAAC7D,QAAQ,QAAO,UAElB,cAAC6D,EAAA,EAAIQ,KAAI,UACP,cAACR,EAAA,EAAIJ,KAAI,CAACa,SAAS,QAAO,qBAG5B,cAACT,EAAA,EAAIQ,KAAI,UACP,cAACR,EAAA,EAAIJ,KAAI,CAACa,SAAS,SAAQ,8BASnC,cAACP,EAAA,EAAMxD,KAAI,UAET,eAAC0D,EAAA,EAAIM,QAAO,WAEV,cAACN,EAAA,EAAIO,KAAI,CAACF,SAAS,QAAO,SACxB,cAAC,GAAS,CAACG,iBAAkB,kBAAMtB,GAAa,EAAM,MAGxD,cAACc,EAAA,EAAIO,KAAI,CAACF,SAAS,SAAQ,SACzB,cAAC,GAAU,CAACG,iBAAkB,kBAAMtB,GAAa,EAAM,kBAYvE,EC5FMuB,GAAWC,YAAe,CAC9BC,IAAK,aAGDC,GAAWC,aAAW,SAACC,EAAE,GAAkB,IAAfC,EAAO,EAAPA,QAE1BtK,EAAQM,aAAaC,QAAQ,YAEnC,MAAO,CACL+J,QAAQ,2BACHA,GAAO,IACVC,cAAevK,EAAK,iBAAaA,GAAU,KAGjD,IAEMwK,GAAS,IAAIC,IAAa,CAC9BlH,KAAM4G,GAASO,OAAOV,IACtBW,MAAO,IAAIC,MA2BEC,OAxBf,WACE,OACE,cAACC,EAAA,EAAc,CAACN,OAAQA,GAAO,SAC7B,eAAC,IAAM,WACH,cAAC,GAAM,IACP,eAAC,IAAM,WACL,cAAC,IAAK,CACJO,KAAK,IACLC,QAAS,cAAC,EAAW,MAEvB,cAAC,IAAK,CACJD,KAAK,SACLC,QAAS,cAAC,EAAU,MAEtB,cAAC,IAAK,CACJD,KAAK,IACLC,QAAS,oBAAI5G,UAAU,YAAW,kCAMhD,ECpDA6G,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,GAAG,MAENC,SAASC,eAAe,Q","file":"static/js/main.770c2043.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const ADD_USER = gql`\r\n  mutation AddUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      user {\r\n        email\r\n        username\r\n        _id\r\n      }\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN = gql`\r\n  mutation Login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        email\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_BOOK = gql`\r\n  mutation AddBook($authors: [String]!, $description: String!, $bookId: String!, $image: String!, $link: String!, $title: String!) {\r\n    addBook(authors: $authors, description: $description, bookId: $bookId, image: $image, link: $link, title: $title) {\r\n      _id\r\n      username\r\n      savedBooks {\r\n        title\r\n        _id\r\n        bookId\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($book: SavedBookInput!) {\r\n    saveBook(book: $book) {\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation RemoveBook($bookId: String!) {\r\n    removeBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      savedBooks {\r\n        title\r\n        _id\r\n        bookId\r\n      }\r\n    }\r\n  }\r\n`;","// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();","export const getSavedBookIds = () => {\r\n    const savedBookIds = localStorage.getItem('SavedBooks')\r\n      ? JSON.parse(localStorage.getItem('SavedBooks'))\r\n      : [];\r\n  \r\n    return savedBookIds;\r\n  };\r\n  \r\n  export const saveBookIds = (bookIdArr) => {\r\n    if (bookIdArr.length) {\r\n      localStorage.setItem('SavedBooks', JSON.stringify(bookIdArr));\r\n    } else {\r\n      localStorage.removeItem('SavedBooks');\r\n    }\r\n  };\r\n  \r\n  export const removeBookId = (bookId) => {\r\n    const savedBookIds = localStorage.getItem('SavedBooks')\r\n      ? JSON.parse(localStorage.getItem('SavedBooks'))\r\n      : null;\r\n  \r\n    if (!savedBookIds) {\r\n      return false;\r\n    }\r\n  \r\n    const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n    localStorage.setItem('SavedBooks', JSON.stringify(updatedSavedBookIds));\r\n  \r\n    return true;\r\n  };","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_BOOK } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // handles add Book functionality\r\n  const [addBook] = useMutation(ADD_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id || 'no id',\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title || 'no title',\r\n        description: book.volumeInfo.description || 'no description',\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n        link: ''\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n    console.log(bookToSave)\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const data = await addBook({\r\n        variables: { ...bookToSave }\r\n      });\r\n      console.log(data)\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;","// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_ME = gql`\r\n\r\nquery Me {\r\n  me {\r\n    _id\r\n    email\r\n    username\r\n    savedBooks {\r\n      _id\r\n      authors\r\n      bookId\r\n      description\r\n      image\r\n      link\r\n      title\r\n    }\r\n  }\r\n}\r\n`;","import React from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { QUERY_ME } from '../utils/queries';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(QUERY_ME);\r\n  const [deleteBook] = useMutation(REMOVE_BOOK);\r\n\r\n  const userData = data?.me || {};\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data } = await deleteBook({\r\n        variables: { bookId }\r\n      });\r\n      console.log(data)\r\n\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book._id} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  // sets up mutation\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } \r\n  catch (e) {\r\n      console.error(e);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n\r\n        </Form.Group>\r\n\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  // graphql mutation login\r\n  const [login] = useMutation(LOGIN);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n\r\n        <Container fluid>\r\n\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n\r\n          <Navbar.Collapse id='navbar'>\r\n\r\n            <Nav className='ml-auto'>\r\n\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n\r\n            </Nav>\r\n\r\n          </Navbar.Collapse>\r\n\r\n        </Container>\r\n\r\n      </Navbar>\r\n\r\n      {/* set modal data up */}\r\n\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n\r\n        <Tab.Container defaultActiveKey='login'>\r\n\r\n          <Modal.Header closeButton>\r\n\r\n            <Modal.Title id='signup-modal'>\r\n\r\n              <Nav variant='pills'>\r\n\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n\r\n              </Nav>\r\n\r\n            </Modal.Title>\r\n\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n\r\n            <Tab.Content>\r\n\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n\r\n            </Tab.Content>\r\n\r\n          </Modal.Body>\r\n\r\n        </Tab.Container>\r\n        \r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;","import React from 'react';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\n\r\n// import pages\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n          <Navbar />\r\n          <Routes>\r\n            <Route\r\n              path='/'\r\n              element={<SearchBooks />}\r\n            />\r\n            <Route\r\n              path='/saved'\r\n              element={<SavedBooks />}\r\n            />\r\n            <Route\r\n              path='*'\r\n              element={<h1 className='display-2'>Wrong page!</h1>}\r\n            />\r\n          </Routes>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}