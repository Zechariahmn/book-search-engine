{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","utils/queries.js","pages/SearchBooks.js","utils/API.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","GET_ME","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","link","infoLink","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","update","cache","me","readQuery","query","writeQuery","data","savedBooks","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","SavedBooks","useQuery","loading","deleteBook","userData","username","handleDeleteBook","updatedBookCache","href","SignupForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","concat","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44e24b0b.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();","export const getSavedBookIds = () => {\r\n    const savedBookIds = localStorage.getItem('saved_books')\r\n      ? JSON.parse(localStorage.getItem('saved_books'))\r\n      : [];\r\n  \r\n    return savedBookIds;\r\n  };\r\n  \r\n  export const saveBookIds = (bookIdArr) => {\r\n    if (bookIdArr.length) {\r\n      localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n    } else {\r\n      localStorage.removeItem('saved_books');\r\n    }\r\n  };\r\n  \r\n  export const removeBookId = (bookId) => {\r\n    const savedBookIds = localStorage.getItem('saved_books')\r\n      ? JSON.parse(localStorage.getItem('saved_books'))\r\n      : null;\r\n  \r\n    if (!savedBookIds) {\r\n      return false;\r\n    }\r\n  \r\n    const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n    localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n  \r\n    return true;\r\n  };","import gql from \"graphql-tag\";\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($book: SavedBookInput!) {\r\n    saveBook(book: $book) {\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n  mutation removeBook($bookId: String!) {\r\n    removeBook(bookId: $bookId) {\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        link\r\n        title\r\n      }\r\n    }\r\n  }\r\n`;","import gql from \"graphql-tag\";\r\n\r\nexport const GET_ME = gql`\r\n  {\r\n    me {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport {SAVE_BOOK} from '../utils/mutations';\r\nimport { GET_ME } from '../utils/queries';\r\n\r\nconst SearchBooks = () => {\r\n\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // define the save book function from the mutation\r\n  const [saveBook] = useMutation(SAVE_BOOK)\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        link: book.volumeInfo.infoLink,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } \r\n  catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await saveBook({\r\n        variables: {book: bookToSave},\r\n        update: cache => {\r\n          const {me} = cache.readQuery({ query: GET_ME });\r\n\r\n          // console.log(me)\r\n          // console.log(me.savedBooks)\r\n          cache.writeQuery({ query: GET_ME , data: {me: { ...me, savedBooks: [...me.savedBooks, bookToSave] } } })\r\n        }\r\n      });\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } \r\n  catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n\r\n        <Container>\r\n\r\n          <h1>Search for Books!</h1>\r\n\r\n          <Form onSubmit={handleFormSubmit}>\r\n\r\n            <Form.Row>\r\n\r\n              <Col xs={12} md={8}>\r\n\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n\r\n              </Col>\r\n\r\n              <Col xs={12} md={4}>\r\n\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n\r\n              </Col>\r\n\r\n            </Form.Row>\r\n\r\n          </Form>\r\n\r\n        </Container>\r\n\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n\r\n        <CardColumns>\r\n\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n\r\n              <Card key={book.bookId} border='dark'>\r\n\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n\r\n                <Card.Body>\r\n\r\n                  <Card.Title>{book.title}</Card.Title>\r\n\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n\r\n                  <Card.Text>{book.description}</Card.Text>\r\n\r\n                  {Auth.loggedIn() && (\r\n\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n\r\n                  )}\r\n\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n\r\n          })}\r\n          \r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n    return fetch('/api/users/me', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  };\r\n  \r\n  export const createUser = (userData) => {\r\n    return fetch('/api/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n  };\r\n  \r\n  export const loginUser = (userData) => {\r\n    return fetch('/api/users/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n  };\r\n  \r\n  // save book data for a logged in user\r\n  export const saveBook = (bookData, token) => {\r\n    return fetch('/api/users', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(bookData),\r\n    });\r\n  };\r\n  \r\n  // remove saved book data for a logged in user\r\n  export const deleteBook = (bookId, token) => {\r\n    return fetch(`/api/users/books/${bookId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  };\r\n  \r\n  // make a search to google books api\r\n  // https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\n  export const searchGoogleBooks = (query) => {\r\n    return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n  };","import React from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport { GET_ME } from '../utils/queries';\r\nimport { REMOVE_BOOK } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data } = useQuery(GET_ME);\r\n  const [deleteBook] = useMutation(REMOVE_BOOK);\r\n  const userData = data?.me || {};\r\n\r\n  if(!userData?.username) {\r\n    return (\r\n      <h4>\r\n        You need to be logged in to see this page. Use the navigation links above to sign up or log in!\r\n      </h4>\r\n    );\r\n  }\r\n\r\n   // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n   const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await deleteBook({\r\n        variables: {bookId: bookId},\r\n        update: cache => {\r\n          const data = cache.readQuery({ query: GET_ME });\r\n          const userDataCache = data.me;\r\n          const savedBooksCache = userDataCache.savedBooks;\r\n          const updatedBookCache = savedBooksCache.filter((book) => book.bookId !== bookId);\r\n          data.me.savedBooks = updatedBookCache;\r\n          cache.writeQuery({ query: GET_ME , data: {data: {...data.me.savedBooks}}})\r\n        }\r\n      });\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } \r\n  catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n\r\n        <CardColumns>\r\n\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  {book.link ? <Card.Text><a href={book.link} target=\"_blank\">More Information on Google Books</a></Card.Text> : null}\r\n                  <Card.Text>{book.description}</Card.Text>\r\n\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book\r\n                  </Button>\r\n\r\n                </Card.Body>\r\n\r\n              </Card>\r\n\r\n            );\r\n          })}\r\n          \r\n        </CardColumns>\r\n\r\n      </Container>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  // sets up mutation\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } \r\n  catch (e) {\r\n      console.error(e);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n\r\n        </Form.Group>\r\n\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [loginUser] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await loginUser({\r\n        variables: {...userFormData} \r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } \r\n  catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n\r\n        </Form.Group>\r\n\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n\r\n      </Form>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n\r\n        <Container fluid>\r\n\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n\r\n          <Navbar.Collapse id='navbar'>\r\n\r\n            <Nav className='ml-auto'>\r\n\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n\r\n            </Nav>\r\n\r\n          </Navbar.Collapse>\r\n\r\n        </Container>\r\n\r\n      </Navbar>\r\n\r\n      {/* set modal data up */}\r\n\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n\r\n        <Tab.Container defaultActiveKey='login'>\r\n\r\n          <Modal.Header closeButton>\r\n\r\n            <Modal.Title id='signup-modal'>\r\n\r\n              <Nav variant='pills'>\r\n\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n\r\n              </Nav>\r\n\r\n            </Modal.Title>\r\n\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n\r\n            <Tab.Content>\r\n\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n\r\n            </Tab.Content>\r\n\r\n          </Modal.Body>\r\n\r\n        </Tab.Container>\r\n        \r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;","import React from 'react';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\n\r\n// import pages\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n\r\n  return (\r\n\r\n    <ApolloProvider client={client}>\r\n\r\n      <Router>\r\n\r\n          <Navbar />\r\n\r\n          <Routes>\r\n\r\n            <Route\r\n              path='/'\r\n              element={<SearchBooks />}\r\n            />\r\n\r\n            <Route\r\n              path='/saved'\r\n              element={<SavedBooks />}\r\n            />\r\n\r\n            <Route\r\n              path='*'\r\n              element={<h1 className='display-2'>Wrong page!</h1>}\r\n            />\r\n\r\n          </Routes>\r\n\r\n      </Router>\r\n      \r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}